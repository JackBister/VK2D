#pragma once

#include <string>
#include <vector>
#include <unordered_map>

#include <SDL/SDL.h>

//Autogenerated from script using SDL documentation
#include "keycodes.h"
#include "luaserializable.h"

typedef std::unordered_map<Keycode, bool, std::hash<int>> Keymap;

struct Input : LuaSerializable
{
	//Call every frame
	//TODO: This could/should be static and push events to all Input instances - question is if that's meaningful in any way.
	void Frame();

	//TODO: Modifier keys?
	bool GetKey(Keycode);
	static int GetKey_Lua(lua_State *);
	bool GetKeyDown(Keycode);
	static int GetKeyDown_Lua(lua_State *);
	bool GetKeyUp(Keycode);
	static int GetKeyUp_Lua(lua_State *);

	bool GetButton(std::string);
	static int GetButton_Lua(lua_State *);
	bool GetButtonDown(std::string);
	static int GetButtonDown_Lua(lua_State *);
	bool GetButtonUp(std::string);
	static int GetButtonUp_Lua(lua_State *);

	void AddKeybind(std::string, Keycode);
	static int AddKeybind_Lua(lua_State *);
	void RemoveKeybind(std::string, Keycode);
	static int RemoveKeybind_Lua(lua_State *);

	
//	void PushToLua(lua_State *) override;

	int LuaIndex(lua_State *) override;
	int LuaNewIndex(lua_State *) override;

	static Input * Deserialize(std::string);

private:
	//TODO: vector means you can have infinite keys bound
	std::unordered_map<std::string, std::vector<Keycode>> buttonMap;
	Keymap downKeys;
	Keymap heldKeys;
	Keymap upKeys;
};
